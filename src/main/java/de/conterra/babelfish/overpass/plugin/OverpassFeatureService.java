package de.conterra.babelfish.overpass.plugin;

import de.conterra.babelfish.overpass.config.*;
import de.conterra.babelfish.overpass.io.OsmFile;
import de.conterra.babelfish.overpass.io.OverpassHandler;
import de.conterra.babelfish.plugin.Plugin;
import de.conterra.babelfish.plugin.v10_02.feature.FeatureLayer;
import de.conterra.babelfish.plugin.v10_02.feature.FeatureService;
import de.conterra.babelfish.plugin.v10_02.feature.Relationship;
import de.conterra.babelfish.plugin.v10_02.feature.Table;
import de.conterra.babelfish.plugin.v10_02.object.feature.FeatureObject;
import de.conterra.babelfish.plugin.v10_02.object.feature.GeometryFeatureObject;
import de.conterra.babelfish.util.DataUtils;
import lombok.extern.slf4j.Slf4j;
import org.openstreetmap.osmosis.core.domain.v0_6.Entity;
import org.openstreetmap.osmosis.core.domain.v0_6.Tag;

import java.awt.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;
import java.util.List;

/**
 * defines a {@link FeatureService} of the Overpass API
 *
 * @author ChrissW-R1
 * @version 0.2.0
 * @since 0.1.0
 */
@Slf4j
public class OverpassFeatureService
		implements FeatureService {
	/**
	 * a {@link Set} of all {@link OverpassFeatureService}s
	 *
	 * @since 0.1.0
	 */
	public static final Map<String, OverpassFeatureService> SERVICES = new HashMap<>();
	
	/**
	 * the unique identifier
	 *
	 * @since 0.1.0
	 */
	private final String id;
	/**
	 * a service description
	 *
	 * @since 0.1.0
	 */
	private final String desc;
	/**
	 * a {@link Set} of all {@link OverpassFeatureLayer}s, which this {@link OverpassFeatureService} provides
	 *
	 * @since 0.1.0
	 */
	private final Set<OverpassFeatureLayer<?>> layers = new HashSet<>();
	
	/**
	 * standard constructor
	 *
	 * @param id   the unique identifier
	 * @param desc a service description
	 * @since 0.1.0
	 */
	public OverpassFeatureService(String id, String desc) {
		this.id = id;
		this.desc = desc;
		
		OverpassFeatureService.SERVICES.put(id, this);
	}
	
	/**
	 * constructor, with given {@link Service}
	 *
	 * @param service the {@link Service}
	 * @since 0.1.0
	 */
	public OverpassFeatureService(Service service)
	throws FileNotFoundException {
		this(service.getId(), service.getDesc());
		
		OsmFileDef fileType = service.getFile();
		if (fileType == null) {
			for (Layer xmlLayer : service.getNodeLayerOrLineLayerOrPolygonLayer()) {
				try {
					this.addLayer(OverpassFeatureLayer.createLayer(xmlLayer));
				} catch (IOException | IllegalArgumentException e) {
					log.warn("Couldn't add layer " + xmlLayer.getName() + "! Failure on parsing!", e);
				}
			}
		} else {
			OsmFile file              = new OsmFile(fileType);
			String  categoryTag       = service.getCategoryTag();
			String  categoryDelimiter = service.getCategoryDelimiter();
			
			Set<String> typeValuesSet = new HashSet<>();
			for (Entity entity : OverpassHandler.getFeatures(new OsmFile(fileType)).values()) {
				for (Tag tag : entity.getTags()) {
					if (tag.getKey().equals(categoryTag)) {
						String tagValue = tag.getValue();
						
						typeValuesSet.add(tagValue);
						typeValuesSet.addAll(Arrays.asList(tagValue.split(categoryDelimiter)));
						
						break;
					}
				}
			}
			
			List<String> typeValuesList = new LinkedList<>(typeValuesSet);
			Collections.sort(typeValuesList);
			
			Map<String, String> properties = new HashMap<>();
			properties.put("category.key", categoryTag);
			
			for (LayerTemplate template : service.getNodeLayerTemplateOrLineLayerTemplateOrPolygonLayerTemplate()) {
				for (String typeValue : typeValuesList) {
					try {
						int layerId = this.getLayers().size();
						
						properties.put("layerId", String.valueOf(layerId));
						properties.put("category.value", typeValue);
						
						Set<String> typeValueSet = new HashSet<>();
						typeValueSet.add(typeValue);
						
						String name = OverpassFeatureService.replaceProperties(template.getName(), properties);
						String desc = OverpassFeatureService.replaceProperties(template.getDesc(), properties);
						
						OverpassFeatureLayer<?> featureLayer;
						
						if (template instanceof NodeLayerTemplate) {
							NodeLayerTemplate nodeTemplate = (NodeLayerTemplate) template;
							
							PictureSymbol symbol = nodeTemplate.getSymbol();
							if (symbol != null) {
								String imgPath = symbol.getPath();
								if (imgPath != null) {
									symbol = OverpassPlugin.OBJECT_FACTORY.createPictureSymbol();
									symbol.setPath(OverpassFeatureService.replaceProperties(imgPath, properties));
								}
							}
							Image image = OverpassFeatureLayer.parseImage(symbol);
							if (image == null) {
								symbol = nodeTemplate.getDefaultSymbol();
								String imgPath = symbol.getPath();
								if (imgPath != null) {
									symbol = OverpassPlugin.OBJECT_FACTORY.createPictureSymbol();
									symbol.setPath(OverpassFeatureService.replaceProperties(imgPath, properties));
								}
								
								image = OverpassFeatureLayer.parseImage(symbol);
							}
							
							featureLayer = new OverpassNodeLayer(
									layerId,
									name,
									desc,
									file,
									categoryTag,
									typeValueSet,
									categoryDelimiter,
									image
							);
						} else if (template instanceof LineLayerTemplate) {
							LineLayerTemplate lineTemplate = (LineLayerTemplate) template;
							featureLayer = new OverpassLineLayer(
									layerId,
									name,
									desc,
									file,
									categoryTag,
									typeValueSet,
									categoryDelimiter,
									OverpassFeatureLayer.parseSymbol(lineTemplate.getDefaultSymbol())
							);
						} else if (template instanceof PolygonLayerTemplate) {
							PolygonLayerTemplate polygonTemplate = (PolygonLayerTemplate) template;
							featureLayer = new OverpassPolygonLayer(
									layerId,
									name,
									desc,
									file,
									categoryTag,
									typeValueSet,
									categoryDelimiter,
									OverpassFeatureLayer.parseSymbol(polygonTemplate.getDefaultSymbol())
							);
						} else {
							continue;
						}
						
						this.addLayer(featureLayer);
					} catch (IOException | ClassCastException e) {
						log.error("Failure on parsing layer template!", e);
					}
				}
			}
		}
	}
	
	/**
	 * replaces all properties with their values on a {@link String}
	 *
	 * @param str        the {@link String} to replace the properties in
	 * @param properties a {@link Map}, which contains the properties (keys) with their values (values)
	 * @return {@code str} with all resolved properties
	 *
	 * @since 0.2.0
	 */
	private static String replaceProperties(String str, Map<String, String> properties) {
		String res = str;
		
		if (res != null) {
			for (String property : properties.keySet()) {
				res = res.replaceAll("\\$\\{" + property + "}", properties.get(property));
			}
		}
		
		return res;
	}
	
	@Override
	public String getServiceDescription() {
		return this.desc;
	}
	
	@Override
	public Plugin getPlugin() {
		return OverpassPlugin.INSTANCE;
	}
	
	@Override
	public String getId() {
		return this.id;
	}
	
	@Override
	public Image getIcon() {
		return DataUtils.toImage(DataUtils.decodeBase64(""));
	}
	
	@Override
	public Set<? extends de.conterra.babelfish.plugin.v10_02.feature.Layer<? extends FeatureObject>> getLayers() {
		Set<de.conterra.babelfish.plugin.v10_02.feature.Layer<? extends FeatureObject>> res = new LinkedHashSet<>();
		
		res.addAll(this.getFeatureLayers());
		res.addAll(this.getTables());
		
		return res;
	}
	
	@Override
	public Set<? extends FeatureLayer<?, ? extends GeometryFeatureObject<?>>> getFeatureLayers() {
		return new HashSet<>(this.layers);
	}
	
	@Override
	public Set<? extends Table<? extends FeatureObject>> getTables() {
		return new LinkedHashSet<>();
	}
	
	@Override
	public Set<? extends Relationship<? extends FeatureObject, ? extends FeatureObject>> getRelationships() {
		return new LinkedHashSet<>();
	}
	
	/**
	 * adds a {@link OverpassFeatureLayer} to this {@link OverpassFeatureService}
	 *
	 * @param layer the {@link OverpassFeatureLayer} to add
	 * @return {@code true}, if this {@link OverpassFeatureService} does not already contain the given {@link OverpassFeatureLayer}
	 *
	 * @see Set#add(Object)
	 * @since 0.1.0
	 */
	public boolean addLayer(OverpassFeatureLayer<?> layer) {
		return this.layers.add(layer);
	}
	
	/**
	 * removes a {@link OverpassFeatureLayer} from this {@link OverpassFeatureService}
	 *
	 * @param layer the {@link OverpassFeatureLayer} to remove
	 * @return {@code true}, if this {@link OverpassFeatureService} contained the given {@link OverpassFeatureLayer}
	 *
	 * @see Set#remove(Object)
	 * @since 0.1.0
	 */
	public boolean removeLayer(OverpassFeatureLayer<?> layer) {
		return this.layers.remove(layer);
	}
}
